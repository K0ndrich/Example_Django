
# Авторизация и Аунтентификация

# Session-Based authentificatiion - аутентификация на основе сессий и cookies (встроенный в django_rest)
# Token-Base authentificatiion - аутентификация на основе токенов
# Json Web Token (JWT) authentification - аутентификация на основе JWT-токенов
# Django Rest Framework OAuth - авторизация через социальные сети (нужно скачивать отдельно)

# Авторизация - проверка подлиности (наличия ) пользователя по введеным данным с данными, которые находяться в базе данных. 
# Существует ли такой пользователь в нашой базе данных

# Аунтентификация - разрешение для пользователя на доступ к закрытой части сайта. Выполняеться после аутентификации


# Session-Based Authorization (базовая авторизация пользователя) - пользователь отправляет данные в поле login и password.
# Если данные верный, тогда создаеться сессия для пользователя в базе данных нашего сервера.
# Создаеться уникальные значения session_id и user_id в базе данных. И ети данные отправляються в браузер 
# Значение session_id сохраняеться в cookies браузера, толлько уже под названием cookies пользователя 


# Session-Based Authentification (базовая аутентификация пользователя) - браузер отправляет cookies пользователя, он же session_id на сервера
# И если в базе данных сервера нашего сайта есть такое значение session_id, тогда аутентификация пользователя прошла успешно
# Изменяться session_id, если пользователь выйдет из системы. session_id удаляеться из базы данных сервера нашего сайта
# И при новой попытке пользователя пройти аутентификация создастся новый session_id и user_id в базе данных сервера нашего сайта
# Проблема в том, что пользователь жестко привязан к устройству на котором зашел на сайт